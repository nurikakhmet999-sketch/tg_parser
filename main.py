import asyncio
import logging
import json
import os
import hashlib
from typing import Dict, List, Set
from dotenv import load_dotenv
from telethon import TelegramClient, errors
from telethon.tl.types import MessageMediaPhoto, MessageMediaDocument
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder 
from bs4 import BeautifulSoup
import aiohttp
import re 

# ================= Configuration =================
load_dotenv()
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# Load from .env
API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")
CONFIG_FILE = "config.json"

# ================= Data Structures =================
class Config:
    def __init__(self):
        self.sources: Dict[str, List[str]] = {"channels": [], "sites": []}
        self.keywords: List[str] = []
        self.target_channel: str = None
        self.sent_hashes: Set[str] = set()
        self.load()

    def clean_sources(self):
        """–£–¥–∞–ª—è–µ—Ç —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        if self.target_channel and self.target_channel in self.sources['channels']:
            self.sources['channels'].remove(self.target_channel)

    def load(self):
        try:
            with open(CONFIG_FILE, "r") as f:
                data = json.load(f)
                self.sources = data.get("sources", {"channels": [], "sites": []})
                self.keywords = data.get("keywords", [])
                self.target_channel = data.get("target_channel")
                self.sent_hashes = set(data.get("sent_hashes", []))
                self.clean_sources()
        except (FileNotFoundError, json.JSONDecodeError) as e:
            logger.warning(f"Config load error: {e}, using defaults")

    def save(self):
        self.clean_sources()
        with open(CONFIG_FILE, "w") as f:
            json.dump({
                "sources": self.sources,
                "keywords": self.keywords,
                "target_channel": self.target_channel,
                "sent_hashes": list(self.sent_hashes)
            }, f, indent=2)

config = Config()
parsing_active = False
parsing_task = None
awaiting_target_channel = False
awaiting_source = False

# ================= Telegram Clients =================
userbot = TelegramClient('userbot_session', API_ID, API_HASH)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# ================= Keyboard =================
def menu_keyboard() -> ReplyKeyboardMarkup:
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )
    return keyboard

def get_main_menu_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫", callback_data="add_source"),
        InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤", callback_data="list_sources")
    )
    builder.row(
        InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫", callback_data="remove_source"),
        InlineKeyboardButton(text="üéØ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", callback_data="set_keywords")
    )
    builder.row(
        InlineKeyboardButton(text="üì° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª", callback_data="set_target"),
        InlineKeyboardButton(text="üîÑ –°—Ç–∞—Ç—É—Å", callback_data="status")
    )
    builder.row(
        InlineKeyboardButton(text="‚ñ∂ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞", callback_data="start_parsing"),
        InlineKeyboardButton(text="‚èπ –°—Ç–æ–ø –ø–∞—Ä—Å–∏–Ω–≥–∞", callback_data="stop_parsing")
    )
    builder.row(
        InlineKeyboardButton(text="üõ† –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏", callback_data="test_send")
    )
    return builder.as_markup()

# ================= Welcome Message =================
WELCOME_MESSAGE = """
ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Content Parser Bot!</b>

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:
1. –ü–∞—Ä—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ Telegram-–∫–∞–Ω–∞–ª–æ–≤ –∏ —Å–∞–π—Ç–æ–≤
2. –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª

üìå <b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å:</b>
1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª (–∫—É–¥–∞ –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è)
2. –î–æ–±–∞–≤—å—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (–∫–∞–Ω–∞–ª—ã –∏–ª–∏ —Å–∞–π—Ç—ã)
3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥!

–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
"""

# ================= Message Wrapper =================
async def send_message_with_menu(chat_id: int, text: str, parse_mode=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é'"""
    await bot.send_message(
        chat_id=chat_id,
        text=text,
        parse_mode=parse_mode,
        reply_markup=menu_keyboard()
    )

# ================= Parsing Utilities =================
def get_message_hash(text: str) -> str:
    return hashlib.md5(text.encode()).hexdigest()

def contains_keywords(text: str, keywords: List[str]) -> bool:
    if not text or not keywords:
        return False
    text_lower = text.lower()
    return any(kw.lower() in text_lower for kw in keywords)

def remove_hyperlinks(text: str) -> str:
    """–£–¥–∞–ª—è–µ—Ç –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏"""
    if not text:
        return text
    
    # –£–¥–∞–ª—è–µ–º markdown —Å—Å—ã–ª–∫–∏ [—Ç–µ–∫—Å—Ç](url)
    text = re.sub(r'\[([^\]]+)\]\([^\)]+\)', r'\1', text)
    
    # –£–¥–∞–ª—è–µ–º HTML —Å—Å—ã–ª–∫–∏ <a href="url">—Ç–µ–∫—Å—Ç</a>
    text = re.sub(r'<a\s+href="[^"]+">([^<]+)</a>', r'\1', text)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ URL (http://example.com)
    text = re.sub(r'https?://\S+', '', text)
    
    return text.strip()

async def parse_sites():
    if not config.target_channel:
        logger.warning("Target channel not set, skipping sites parsing")
        return

    async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=30)) as session:
        for site in config.sources["sites"]:
            try:
                logger.info(f"Parsing site: {site}")
                async with session.get(site) as resp:
                    if resp.status != 200:
                        logger.warning(f"Site {site} returned status {resp.status}")
                        continue

                    html = await resp.text()
                    soup = BeautifulSoup(html, 'html.parser')
                    
                    for element in soup(['script', 'style', 'nav', 'footer']):
                        element.decompose()
                    
                    text = ' '.join(soup.stripped_strings)
                    if not text:
                        logger.warning(f"No text content found on {site}")
                        continue
                        
                    snippet = text[:1000]
                    msg_hash = get_message_hash(snippet)

                    if msg_hash not in config.sent_hashes:
                        if not config.keywords or contains_keywords(text, config.keywords):
                            message_text = f"{snippet}..."
                            if len(message_text) > 4000:
                                message_text = message_text[:4000] + "..."

                            try:
                                await userbot.send_message(
                                    config.target_channel,
                                    message_text,
                                    link_preview=False
                                )
                                config.sent_hashes.add(msg_hash)
                                config.save()
                                logger.info(f"Successfully sent content from {site}")
                            except errors.FloodWaitError as e:
                                logger.error(f"Flood wait error: {e}, sleeping for {e.seconds} seconds")
                                await asyncio.sleep(e.seconds)
                            except Exception as e:
                                logger.error(f"Error sending message from {site}: {e}")
            except Exception as e:
                logger.error(f"Error parsing site {site}: {e}")

async def parse_channels():
    if not config.target_channel:
        logger.warning("Target channel not set, skipping channels parsing")
        return

    for channel in config.sources["channels"]:
        try:
            logger.info(f"Parsing channel: {channel}")
            async for msg in userbot.iter_messages(channel, limit=50):
                if not parsing_active:
                    logger.info("Parsing stopped by user")
                    return
                
                if not msg.message and not msg.media:
                    continue
                    
                clean_content = msg.text or msg.caption or ""
                # –£–¥–∞–ª—è–µ–º –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                clean_content = remove_hyperlinks(clean_content)
                msg_hash = get_message_hash(clean_content + str(msg.media))
                
                if msg_hash not in config.sent_hashes:
                    if not config.keywords or contains_keywords(clean_content, config.keywords):
                        try:
                            if msg.media:
                                if isinstance(msg.media, MessageMediaPhoto):
                                    await userbot.send_file(
                                        config.target_channel,
                                        msg.media.photo,
                                        caption=clean_content[:1024] if clean_content else None
                                    )
                                elif isinstance(msg.media, MessageMediaDocument):
                                    await userbot.send_file(
                                        config.target_channel,
                                        msg.media.document,
                                        caption=clean_content[:1024] if clean_content else None
                                    )
                                else:
                                    await userbot.forward_messages(
                                        config.target_channel,
                                        msg
                                    )
                            else:
                                message_text = clean_content[:4000]
                                await userbot.send_message(
                                    config.target_channel,
                                    message_text,
                                    link_preview=False
                                )
                            
                            config.sent_hashes.add(msg_hash)
                            config.save()
                            logger.info(f"Successfully forwarded message from {channel}")
                        except errors.FloodWaitError as e:
                            logger.error(f"Flood wait error: {e}, sleeping for {e.seconds} seconds")
                            await asyncio.sleep(e.seconds)
                        except Exception as e:
                            logger.error(f"Error forwarding message from {channel}: {e}")
                            try:
                                if clean_content:
                                    await userbot.send_message(
                                        config.target_channel,
                                        clean_content[:4000],
                                        link_preview=False
                                    )
                            except Exception as fallback_error:
                                logger.error(f"Fallback sending also failed: {fallback_error}")

        except errors.ChannelPrivateError:
            logger.error(f"Channel {channel} is private or you're banned")
        except errors.ChannelInvalidError:
            logger.error(f"Channel {channel} is invalid or doesn't exist")
        except Exception as e:
            logger.error(f"Error parsing channel {channel}: {e}")

async def parsing_loop():
    global parsing_active
    parsing_active = True
    logger.info("Parsing loop started")
    
    while parsing_active:
        try:
            await asyncio.gather(
                parse_sites(),
                parse_channels(),
                return_exceptions=True
            )
        except Exception as e:
            logger.error(f"Parsing error: {e}")
        
        sleep_time = 60 if parsing_active else 5
        logger.info(f"Sleeping for {sleep_time} seconds")
        await asyncio.sleep(sleep_time)

# ================= Bot Handlers =================
@dp.message(Command("start", "help"))
async def cmd_start(message: types.Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await send_message_with_menu(
        message.chat.id,
        WELCOME_MESSAGE,
        parse_mode="HTML"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard()
    )

@dp.callback_query(F.data == "status")
async def show_status(callback: types.CallbackQuery):
    await callback.answer()
    status_text = (
        f"üìä <b>–°—Ç–∞—Ç—É—Å:</b>\n\n"
        f"‚Ä¢ –¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª: {config.target_channel or '–Ω–µ –∑–∞–¥–∞–Ω'}\n"
        f"‚Ä¢ –ö–∞–Ω–∞–ª–æ–≤ –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö: {len(config.sources['channels'])}\n"
        f"‚Ä¢ –°–∞–π—Ç–æ–≤ –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö: {len(config.sources['sites'])}\n"
        f"‚Ä¢ –ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {len(config.keywords) or '–Ω–µ –∑–∞–¥–∞–Ω—ã'}\n"
        f"‚Ä¢ –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(config.sent_hashes)}\n"
        f"‚Ä¢ –ü–∞—Ä—Å–∏–Ω–≥: {'–∞–∫—Ç–∏–≤–µ–Ω' if parsing_active else '–Ω–µ –∞–∫—Ç–∏–≤–µ–Ω'}"
    )
    await callback.message.edit_text(status_text, parse_mode="HTML", reply_markup=get_main_menu_keyboard())

@dp.callback_query(F.data == "start_parsing")
async def start_parsing_handler(callback: types.CallbackQuery):
    global parsing_task, parsing_active
    
    if not config.target_channel:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª!", show_alert=True)
        return
        
    if parsing_active:
        await callback.answer("–ü–∞—Ä—Å–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω!", show_alert=True)
        return
    
    parsing_active = True
    parsing_task = asyncio.create_task(parsing_loop(), name="parsing_loop")
    await callback.answer("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!")
    await show_status(callback)

@dp.callback_query(F.data == "stop_parsing")
async def stop_parsing_handler(callback: types.CallbackQuery):
    global parsing_active
    
    if not parsing_active:
        await callback.answer("–ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω!", show_alert=True)
        return
    
    parsing_active = False
    if parsing_task:
        parsing_task.cancel()
    await callback.answer("‚èπ –ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    await show_status(callback)

@dp.callback_query(F.data == "test_send")
async def test_send_handler(callback: types.CallbackQuery):
    if not config.target_channel:
        await callback.answer("‚ùå –¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!", show_alert=True)
        return
    
    try:
        await userbot.send_message(
            config.target_channel,
            "‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–∞—Ä—Å–µ—Ä–∞\n\n"
            "–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ –±–æ—Ç –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª."
        )
        await callback.answer("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", show_alert=True)
        await send_message_with_menu(
            callback.message.chat.id,
            "‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª!"
        )
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}"
        logger.error(error_msg)
        await send_message_with_menu(
            callback.message.chat.id,
            error_msg
        )

@dp.callback_query(F.data == "set_target")
async def set_target_handler(callback: types.CallbackQuery):
    global awaiting_target_channel
    await callback.answer()
    awaiting_target_channel = True
    await send_message_with_menu(
        callback.message.chat.id,
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ @username –∫–∞–Ω–∞–ª–∞, –∫—É–¥–∞ –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.\n"
        "–ü—Ä–∏–º–µ—Ä: @mytargetchannel\n\n"
        "–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ!\n\n"
        f"–¢–µ–∫—É—â–∏–π: {config.target_channel or '–Ω–µ –∑–∞–¥–∞–Ω'}"
    )

@dp.callback_query(F.data == "add_source")
async def add_source_handler(callback: types.CallbackQuery):
    global awaiting_source
    await callback.answer()
    awaiting_source = True
    await send_message_with_menu(
        callback.message.chat.id,
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞:\n"
        "- –î–ª—è Telegram –∫–∞–Ω–∞–ª–∞: @username –∏–ª–∏ t.me/username\n"
        "- –î–ª—è —Å–∞–π—Ç–∞: http://example.com –∏–ª–∏ https://example.com\n\n"
        "‚ö†Ô∏è –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª –∫–∞–∫ –∏—Å—Ç–æ—á–Ω–∏–∫!"
    )

@dp.callback_query(F.data == "remove_source")
async def remove_source_handler(callback: types.CallbackQuery):
    await callback.answer()
    
    if not config.sources["channels"] and not config.sources["sites"]:
        await send_message_with_menu(
            callback.message.chat.id,
            "–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"
        )
        return
    
    builder = InlineKeyboardBuilder()
    for source in config.sources["channels"] + config.sources["sites"]:
        builder.row(InlineKeyboardButton(
            text=f"‚ùå –£–¥–∞–ª–∏—Ç—å {source[:20]}{'...' if len(source) > 20 else ''}",
            callback_data=f"remove_{hashlib.md5(source.encode()).hexdigest()}"
        ))
    
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(F.data.startswith("remove_"))
async def confirm_remove_handler(callback: types.CallbackQuery):
    await callback.answer()
    source_hash = callback.data.split("_")[1]
    
    for source_type in ["channels", "sites"]:
        for source in config.sources[source_type][:]:
            if hashlib.md5(source.encode()).hexdigest() == source_hash:
                config.sources[source_type].remove(source)
                config.save()
                await send_message_with_menu(
                    callback.message.chat.id,
                    f"‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫ {source} —É–¥–∞–ª–µ–Ω"
                )
                await list_sources_handler(callback)
                return
    
    await send_message_with_menu(
        callback.message.chat.id,
        "‚ùå –ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"
    )

@dp.callback_query(F.data == "list_sources")
async def list_sources_handler(callback: types.CallbackQuery):
    await callback.answer()
    config.clean_sources()
    
    sources_text = []
    if config.sources['channels']:
        sources_text.append("üì¢ <b>–¢–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª—ã:</b>\n" + "\n".join(f"‚Ä¢ {ch}" for ch in config.sources['channels']))
    else:
        sources_text.append("üì¢ <b>–¢–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª—ã:</b> –ù–µ—Ç")
    
    if config.sources['sites']:
        sources_text.append("üåê <b>–í–µ–±-—Å–∞–π—Ç—ã:</b>\n" + "\n".join(f"‚Ä¢ {site}" for site in config.sources['sites']))
    else:
        sources_text.append("üåê <b>–í–µ–±-—Å–∞–π—Ç—ã:</b> –ù–µ—Ç")
    
    status_text = (
        "üìã <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        f"üéØ <b>–¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª:</b> {config.target_channel or '–ù–µ –∑–∞–¥–∞–Ω'}\n\n"
        f"üîç <b>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:</b> {', '.join(config.keywords) or '–ù–µ –∑–∞–¥–∞–Ω—ã'}\n\n"
        + "\n\n".join(sources_text)
    )
    
    await callback.message.edit_text(
        status_text, 
        parse_mode="HTML", 
        reply_markup=get_main_menu_keyboard()
    )

@dp.callback_query(F.data == "set_keywords")
async def set_keywords_handler(callback: types.CallbackQuery):
    await callback.answer()
    await send_message_with_menu(
        callback.message.chat.id,
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n"
        "–ü—Ä–∏–º–µ—Ä: bitcoin,–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞,blockchain\n\n"
        "–î–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ \"-\"\n\n"
        f"–¢–µ–∫—É—â–∏–µ: {', '.join(config.keywords) if config.keywords else '–Ω–µ –∑–∞–¥–∞–Ω—ã'}"
    )

@dp.message(F.text)
async def handle_text(message: types.Message):
    global awaiting_target_channel, awaiting_source
    text = message.text.strip()

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        await message.answer(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_menu_keyboard()
        )
        awaiting_target_channel = False
        awaiting_source = False
        return
    
    if awaiting_target_channel:
        channel = message.text.strip()
        if not channel.startswith('@'):
            await send_message_with_menu(
                message.chat.id,
                "–ò–º—è –∫–∞–Ω–∞–ª–∞ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return
            
        try:
            entity = await userbot.get_entity(channel)
            if not entity:
                raise ValueError("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
            config.target_channel = channel
            config.save()
            await send_message_with_menu(
                message.chat.id,
                f"‚úÖ –¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {channel}"
            )
            awaiting_target_channel = False
        except Exception as e:
            await send_message_with_menu(
                message.chat.id,
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:\n"
                "1. –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
                "2. –í—ã —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π @username –∫–∞–Ω–∞–ª–∞\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
        return
    
    elif awaiting_source:
        source = message.text.strip()
        
        if source.startswith(('http://', 'https://')):
            if source in config.sources['sites']:
                await send_message_with_menu(
                    message.chat.id,
                    "–≠—Ç–æ—Ç —Å–∞–π—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω!"
                )
                return
                
            config.sources['sites'].append(source)
            config.save()
            await send_message_with_menu(
                message.chat.id,
                f"‚úÖ –°–∞–π—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {source}"
            )
            
        elif source.startswith(('@', 't.me/')):
            if source.startswith('t.me/'):
                source = '@' + source.split('/')[-1]
                
            if source == config.target_channel:
                await send_message_with_menu(
                    message.chat.id,
                    "–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–ª—è—Ç—å —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª –∫–∞–∫ –∏—Å—Ç–æ—á–Ω–∏–∫!"
                )
                return
                
            if source in config.sources['channels']:
                await send_message_with_menu(
                    message.chat.id,
                    "–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω!"
                )
                return
                
            try:
                entity = await userbot.get_entity(source)
                if not entity:
                    raise ValueError("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    
                config.sources['channels'].append(source)
                config.save()
                await send_message_with_menu(
                    message.chat.id,
                    f"‚úÖ –ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω: {source}"
                )
            except Exception as e:
                await send_message_with_menu(
                    message.chat.id,
                    f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n"
                    "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:\n"
                    "1. –ë–æ—Ç –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É\n"
                    "2. –í—ã —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π @username –∫–∞–Ω–∞–ª–∞\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
        else:
            await send_message_with_menu(
                message.chat.id,
                "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞.\n"
                "–î–ª—è Telegram –∫–∞–Ω–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ @username –∏–ª–∏ t.me/username\n"
                "–î–ª—è —Å–∞–π—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ http:// –∏–ª–∏ https://"
            )
        awaiting_source = False
        return
    
    elif any(word in message.text.lower() for word in ["–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", "keywords"]):
        if message.text.strip() == "-":
            config.keywords = []
            config.save()
            await send_message_with_menu(
                message.chat.id,
                "‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –æ—Ç–∫–ª—é—á–µ–Ω–∞"
            )
        else:
            keywords = [kw.strip() for kw in message.text.split(',') if kw.strip()]
            config.keywords = keywords
            config.save()
            await send_message_with_menu(
                message.chat.id,
                f"‚úÖ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {', '.join(keywords)}"
            )
        return
    
    await send_message_with_menu(
        message.chat.id,
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º"
    )

async def main():
    await userbot.start()
    logger.info("Userbot started")
    
    await dp.start_polling(bot)
    logger.info("Bot started")

if __name__ == "__main__":
    asyncio.run(main())